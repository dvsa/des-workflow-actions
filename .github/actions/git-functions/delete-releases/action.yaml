name: Delete GitHub Releases
description: Delete GitHub Release/Tag

inputs:
  branch-name:
    description: Name of the Branch to perform actions upon
    required: true
  release-type:
    description: Type of Release (full, frontend, backend)
    required: true
  repos-json-filename:
    description: File name containing the repositories JSON content
    required: true
  tag-to-delete:
    description: The tag to be deleted
    required: true

runs:
  using: composite
  steps:
    - name: Delete Release
      shell: bash
      run: |
        # Delete Release      
        delete_release() {
          local repo=$1 tag=$2
          gh release delete $tag --cleanup-tag -R dvsa/$repo -y && status="🗑️ Deleted" || status="❌ Failed"

          echo "| $repo | $tag | $status |" >> $GITHUB_STEP_SUMMARY
        }
        
        # Main Logic
        gh auth setup-git
        echo "## Delete Release Summary" >> $GITHUB_STEP_SUMMARY
        
        for release_component in ${{ inputs.release-type }}; do
          # Output table heading to GitHub Summary
          echo "#### Repositories ($release_component)" >> $GITHUB_STEP_SUMMARY
          echo "| Repository | Tag | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| :--- | :--- | :--- |" >> $GITHUB_STEP_SUMMARY
        
          # Get shared component tags (frontend/backend)
          first_component_repo_name=$(jq -rc ".$release_component[0].repoName" ${{ inputs.repos-json-filename }})
          component_tags=$(gh api /repos/dvsa/$first_component_repo_name/git/matching-refs/tags | jq -r '.[].ref' | cut -d '/' -f 3 | sort -V)
        
          # Loop through all repositories in a component (frontend/backend)
          jq -rc ".$release_component[]" ${{ inputs.repos-json-filename }} | while read -r repo; do
            latest_release_tag=$(echo "$component_tags" | grep -E "^${{ inputs.branch-name }}\\..*" | sort -V | tail -n 1 || true)

            if ! echo "$component_tags" | grep -q "${{ inputs.tag-to-delete }}"; then
              echo "| $repo | ${{ inputs.tag-to-delete }} | ☑️ Does not exist |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ inputs.tag-to-delete }}" != "$latest_release_tag" ]]; then
              echo "| $repo | ${{ inputs.tag-to-delete }} | ❌ Invalid tag: Most recent tag must be provided |" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              delete_release $repo ${{ inputs.tag-to-delete }}
            fi
          done
        done