name: Create GitHub Releases
description: Create GitHub Release/Tag

inputs:
  base-branch:
    description: Source Branch for creation
    required: false
  branch-name:
    description: Name of the Branch to perform actions upon
    required: true
  release-type:
    description: Type of Release (full, frontend, backend)
    required: true
  repos-json-filename:
    description: File name containing the repositories JSON content
    required: true
outputs:
  frontend-release-tag:
    description: The release tag created for the frontend
    value: ${{ steps.create-release.outputs.frontend-release-tag }}
  backend-release-tag:
    description: The release tag created for the backend
    value: ${{ steps.create-release.outputs.backend-release-tag }}

runs:
  using: composite
  steps:
    - name: Create Release
      id: create-release
      shell: bash
      run: |
        # Create Release
        create_release() {
          local repo=$1 previous_release_tag=$2 release_tag=$3
          [[ -n $previous_release_tag ]] && additional_args="--notes-start-tag $previous_release_tag" || additional_args=""

          release=$(gh release create $release_tag --title "v${release_tag#release-}" \
          --target ${{ inputs.branch-name }} -R dvsa/$repo --generate-notes $additional_args)
        
          [[ "$release" =~ https://github.com/dvsa/$repo/* ]] && status="✅ Created" || status="❌ Failed"
        
          echo "| $repo | $release_tag | $status |" >> $GITHUB_STEP_SUMMARY
        }
        
        # Main Logic
        gh auth setup-git
        echo "## Create Tag Summary" >> $GITHUB_STEP_SUMMARY
        
        for release_component in ${{ inputs.release-type }}; do
          # Get shared component tags (frontend/backend)
          first_component_repo_name=$(jq -rc ".$release_component[0].repoName" ${{ inputs.repos-json-filename }})
          component_tags=$(gh api /repos/dvsa/$first_component_repo_name/git/matching-refs/tags | jq -r '.[].ref' | cut -d '/' -f 3 | sort -V)
          component_branch_exists=$(gh api /repos/dvsa/$first_component_repo_name/git/matching-refs/heads/${{ inputs.branch-name }} |  jq -r '.[].ref')

          # Fail workflow if branch doesn't exist
          if [[ -z "$component_branch_exists" ]]; then
            echo "❌ Invalid branch: The branch \`${{ inputs.branch-name }}\` has not yet been created" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        
          # Generate the release tag for a component (frontend/backend) and output to $GITHUB_OUTPUT
          existing_tag=$(echo "$component_tags" | grep -E "^${{ inputs.branch-name }}\\..*" | tail -n 1 || true)
          [[ -z "$existing_tag" ]] && release_tag="${{ inputs.branch-name }}.0" || release_tag="${existing_tag%.*}.$(( ${existing_tag##*.} + 1 ))"
          [[ ${{ inputs.release-type }} == "frontend" ]] && echo "frontend-release-tag=$release_tag" >> $GITHUB_OUTPUT || echo "backend-release-tag=$release_tag" >> $GITHUB_OUTPUT
          
          # Output table heading to GitHub Summary
          echo "#### Repositories ($release_component)" >> $GITHUB_STEP_SUMMARY
          echo "| Repository | Tag | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| :--- | :--- | :--- |" >> $GITHUB_STEP_SUMMARY
        
          # Loop through all repositories in a component (frontend/backend)
          jq -rc ".$release_component[]" ${{ inputs.repos-json-filename }} | while read -r repo; do
            repo_name=$(jq -r '.repoName' <<< $repo)

            # Get the latest release tag
            previous_release_tag=$(echo "$component_tags" | tail -n 1)

            # Fall back to empty string for previous tag if no tags exists to support new repositories being added to repositories.json
            previous_tag_check=$(gh api /repos/dvsa/$repo_name/git/matching-refs/tags/$previous_release_tag | jq -r ".[].ref")          
            [[ -z "$previous_tag_check" ]] && previous_release_tag=""
        
            create_release $repo_name "$previous_release_tag" $release_tag
          done
        done