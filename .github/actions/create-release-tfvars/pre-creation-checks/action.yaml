name: Check for Release tfvars
description: "Checks if the release tfvars have already been created for a microservice"
inputs:
  component:
    description: "The associated Terraform component for the service"
    required: true
  secrets:
    description: "Organization secrets toJSON"
    required: true
outputs:
  branch:
    description: "The release branch name"
    value: ${{ steps.get_branch.outputs.BRANCH }}
  short_commit:
    description: "The short commit for the release branch"
    value: ${{ steps.get_short_commit.outputs.short_commit }}
  release_build_required:
    description: "Whether a release build is required for the microservice or not"
    value: ${{ steps.s3_files.outputs.release_build_required }}

runs:
  using: composite
  steps:
    - name: Get Branch
      id: get_branch
      shell: bash
      run: |
        echo "branch=$(echo ${{ github.ref_name }} | cut -d '.' -f -3)" >> $GITHUB_OUTPUT

    - name: 📨 Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.get_branch.outputs.branch }}

    - name: 🔍 Determine service name
      shell: bash
      run: echo "SERVICE_NAME=$(jq -r '.name | sub("mes-"; "") | sub ("-service"; "")' package.json)" >> $GITHUB_ENV

    - name: Get Short Commit
      id: get_short_commit
      shell: bash
      run: echo "short_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: 🔑 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ fromJSON(inputs.secrets).AWS_ACCOUNT_ID }}:role/github-actions
        aws-region: ${{ fromJSON(inputs.secrets).DVSA_AWS_REGION }}

    - name: 🤫 Get AWS Secrets
      uses: aws-actions/aws-secretsmanager-get-secrets@v1
      with:
        secret-ids: des-aws/env
        parse-json-secrets: true

    - name: Check S3 for Files
      id: s3_files
      shell: bash
      continue-on-error: true
      run: |
        release_build_required=false

        if aws s3 ls s3://${{ env.DES_AWS_ENV_ARTEFACT_S3 }}/mes/gha/releases/${{ inputs.component }}_${{ github.ref_name }}.tfvars; then
          echo "tfvars for ${{ github.ref_name }} already exist, this job will not override existing tfvars."
          exit 1
        fi
        
        if ! aws s3 ls ${{ env.DES_AWS_ENV_ARTEFACT_S3 }}/mes/gha/functions/ \
        | grep ${{ steps.get_short_commit.outputs.short_commit }}; then
          echo "Artefacts do not exist for ${{ env.SERVICE_NAME }} for commit ${{ steps.get_short_commit.outputs.short_commit }}."
          echo "Building an artefact for ${{ env.SERVICE_NAME }} service for ${{ github.ref_name }}."
          release_build_required=true
        fi
        
        echo "release_build_required=$release_build_required" >> $GITHUB_OUTPUT