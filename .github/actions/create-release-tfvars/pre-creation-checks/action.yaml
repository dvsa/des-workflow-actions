name: Pre Creation Checks
description: "Checks if the release manifest has already been created for a microservice and if the artefact has been built"
inputs:
  secrets:
    description: "Organization secrets toJSON"
    required: true
outputs:
  branch:
    description: "The release branch name"
    value: ${{ steps.set_outputs.outputs.BRANCH }}
  service_name:
    description: The name of the microservice
    value: ${{ steps.set_outputs.outputs.service_name }}
  short_commit:
    description: "The short commit for the release branch"
    value: ${{ steps.set_outputs.outputs.short_commit }}
  release_build_required:
    description: "Whether a release build is required for the microservice or not"
    value: ${{ steps.set_outputs.outputs.release_build_required }}

runs:
  using: composite
  steps:
    - name: 🔍 Get Branch
      shell: bash
      run: |
        echo "BRANCH=$(echo ${{ github.ref_name }} | cut -d '.' -f -3)" >> $GITHUB_ENV

    - name: 📨 Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: 🔍 Determine service name
      shell: bash
      run: echo "SERVICE_NAME=$(jq -r '.name | sub("mes-"; "") | sub ("-service"; "")' package.json)" >> $GITHUB_ENV

    - name: 🔍 Get Short Commit
      shell: bash
      run: echo "SHORT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: 🔑 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ fromJSON(inputs.secrets).AWS_ACCOUNT_ID }}:role/github-actions
        aws-region: ${{ fromJSON(inputs.secrets).DVSA_AWS_REGION }}

    - name: 🤫 Get AWS Secrets
      uses: aws-actions/aws-secretsmanager-get-secrets@v1
      with:
        secret-ids: des-aws/env
        parse-json-secrets: true

    - name: Check S3 for Files
      id: s3_files
      shell: bash
      run: |
        release_build_required=false
        if aws s3 ls s3://${{ env.DES_AWS_ENV_ARTEFACT_S3 }}/mes/gha/manifests/releases/${{ env.SERVICE_NAME }}_${{ github.ref_name }}.manifest; then
          echo "The manifest for ${{ github.ref_name }} already exists, this job will not override the existing manifest."
          exit 1
        fi
        
        if ! aws s3 ls ${{ env.DES_AWS_ENV_ARTEFACT_S3 }}/mes/gha/functions/ | grep ${{ env.SHORT_COMMIT }}; then
          echo "Artefacts do not exist for ${{ env.SERVICE_NAME }} service for commit ${{ env.SHORT_COMMIT }}."
          echo "Building an artefact for ${{ env.SERVICE_NAME }} service for ${{ github.ref_name }}."
          release_build_required=true
        fi
        
        echo "RELEASE_BUILD_REQUIRED=$release_build_required" >> $GITHUB_ENV

    - name: Set Outputs
      id: set_outputs
      shell: bash
      run: |
          echo "branch=${{ env.BRANCH }}" >> $GITHUB_OUTPUT
          echo "service_name=${{ env.SERVICE_NAME }}" >> $GITHUB_OUTPUT
          echo "short_commit=${{ env.SHORT_COMMIT }}" >> $GITHUB_OUTPUT
          echo "release_build_required=${{ env.RELEASE_BUILD_REQUIRED }}" >> $GITHUB_OUTPUT