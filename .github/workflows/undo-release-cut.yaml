name: ↩️ Undo Release Cut

on:
  workflow_call:
    inputs:
      branch-to-delete:
        type: string
        required: true
      tag-to-delete:
        type: string
        required: true
      delete-release-branch:
        type: string
        required: true
      delete-release-tag:
        type: string
        required: true
      release-type:
        type: string
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  release-cut:
    name: ↩️ Undo Release Cut
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN_TEMP }}
    steps:
      - name: ✔️ Validate Release Branch
        id: validate_release_tag
        run: |
          if [[ ! "${{ inputs.branch-to-delete }}" =~ ^release-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid Release Branch '${{ inputs.branch-to-delete }}'. Branch should be in the format release-x.x.x"
            exit 1
          fi

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DES_AWS_ROLE }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: 🤫 Get AWS Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: 🔍 Get Repositories
        id: get_repositories
        run: |
          aws secretsmanager get-secret-value --secret-id des-repositories --query SecretString | jq . --raw-output  > repositories.json
          echo "repositories=$(cat repositories.json | jq -rc)" >> $GITHUB_OUTPUT
          
          [ "${{ inputs.release-type }}" == "full" ] && release_type="frontend backend" || release_type=${{ inputs.release-type }}
          echo "release_type=$release_type" >> $GITHUB_OUTPUT

      - name: 🔍 Check Release Creation Date
        if: inputs.delete-release-tag == 'true'
        run: |
          for release_component in ${{ steps.get_repositories.outputs.release_type }}; do
            component_repos=$(jq -rc ".$release_component[].repoName" repositories.json)
            date_created=$(gh api /repos/dvsa/$(echo "$component_repos" | head -n 1)/releases | jq -r '.[] | select(.tag_name | test("${{ inputs.tag-to-delete }}")) | .published_at')
            date_created_timestamp=$(date -d "$date_created" +%s)
            current_timestamp=$(date +%s)
            timestamp_difference=$((current_timestamp - date_created_timestamp))
          
            if [ "$timestamp_difference" -ge 86400 ]; then
              echo "❌ Error: \`${{ inputs.tag-to-delete }}\` will not be deleted as the deletion timeframe has expired (24 hours)" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          done

      - name: 🗑️ Delete Release Branch
        if: inputs.delete-release-branch == 'true'
        uses: dvsa/des-workflow-actions/.github/actions/git-functions/delete-branches@main
        with:
          branch-name: ${{ inputs.branch-to-delete }}
          repos-json-filename: repositories.json
          release-type: ${{ steps.get_repositories.outputs.release_type }}

      - name: 🗑️ Delete Release Tags
        if: inputs.delete-release-tag == 'true'
        uses: dvsa/des-workflow-actions/.github/actions/git-functions/delete-releases@main
        with:
          branch-name: ${{ inputs.branch-to-delete }}
          tag-to-delete: ${{ inputs.tag-to-delete }}
          repos-json-filename: repositories.json
          release-type: ${{ steps.get_repositories.outputs.release_type }}

      - name: 🗑️ Delete Release Manifests
        if: inputs.delete-release-tag == 'true' && contains(fromJSON('["backend"]'), inputs.release-type)
        run: | 
          aws s3api list-objects-v2 \
          --bucket ${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }} \
          --prefix mes/gha/manifests/releases/ \
          --query 'Contents[?contains(Key, `${{ inputs.tag-to-delete }}`)].Key' \
          > manifests_to_delete.json
  
          jq '{Objects: map({Key: .}), Quiet: false}' manifests_to_delete.json > delete.json
  
          delete_output=$(aws s3api delete-objects \
          --bucket ${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }} \
          --delete file://delete.json)
  
          expected_count=$(jq '.Objects | length' delete.json)
          deleted_count=$(jq '.Deleted | length' <<< "$delete_output")
          echo "## Delete Release Manifest" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$expected_count" -eq "$deleted_count" ]]; then
            echo "✅ All $expected_count release manifests successfully deleted." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Only $deleted_count of $expected_count release manifests deleted." >> $GITHUB_STEP_SUMMARY
          fi
