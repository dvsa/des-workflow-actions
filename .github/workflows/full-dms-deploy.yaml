name: üöÄ Full DMS Deploy

on:
  workflow_call:
    inputs:
      runner:
        description: The EC2 GHA runner that has been spun up for deployment
        type: string
        required: true
      aws-account:
        description: AWS Account
        type: string
        required: true
      tf-environment:
        description: Terraform Environment
        type: string
        required: true
      db-script-branch:
        description: The branch to run the DB scripts from
        type: string
        required: true
      full-load-sleep-time:
        description: The amount of time in seconds to sleep to allow the full load to run
        type: string
        required: false
        default: 1200

permissions:
  id-token: write
  contents: write

jobs:
  full-dms-deploy:
    if: always() && !failure() && !cancelled()
    runs-on: ${{ inputs.runner }}
    steps:
      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_MGMT }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}
          role-session-name: Terraform-GHA

      - name: ü§´ Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: üîë Assume AWS ${{ inputs.aws-account }} Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-account == 'prod' && secrets.AWS_ROLE_PROD || secrets.AWS_ROLE_NONPROD }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}
          role-session-name: Terraform-GHA

      - name: ü§´ Get ${{ inputs.aws-account }} Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: RDS_CREDENTIALS, des-${{ inputs.tf-environment }}-rds-credentials
          parse-json-secrets: true

      - name: üîç Get DMS Task ARNs
        id: dms-tasks
        run: |
          static_task_arn=$(aws dms describe-replication-tasks --without-settings --region ${{ secrets.DVSA_AWS_REGION }} |
          jq '.ReplicationTasks[] | select(.ReplicationTaskIdentifier |
          test("mes-${{ inputs.tf-environment }}-dms-static-full-load-and-cdc")) | .ReplicationTaskArn' --raw-output)
          echo "static_task_arn=$static_task_arn" >> $GITHUB_OUTPUT
          
          date_filtered_task_arn=$(aws dms describe-replication-tasks --without-settings --region ${{ secrets.DVSA_AWS_REGION }} |
          jq '.ReplicationTasks[] | select(.ReplicationTaskIdentifier |
          test("mes-${{ inputs.tf-environment }}-dms-datefiltered-full-load-and-cdc")) | .ReplicationTaskArn' --raw-output)
          echo "date_filtered_task_arn=$date_filtered_task_arn" >> $GITHUB_OUTPUT
          
          echo "‚úÖ DMS Task ARNs successfully retrieved."

      - name: ‚èπÔ∏è Stop Static Task
        if: github.event_name == 'workflow_dispatch'
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/stop-dms-task@main
        with:
          task-arn: ${{ steps.dms-tasks.outputs.static_task_arn }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ‚èπÔ∏è Stop Date Filtered Task
        if: github.event_name == 'workflow_dispatch'
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/stop-dms-task@main
        with:
          task-arn: ${{ steps.dms-tasks.outputs.date_filtered_task_arn }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: üö´ Disable Pollers and DMS Task Updater
        run: |
          IFS=" " read -ra cw_rules <<< "${{ env.DES_GLOBALS_ENV_DMS_CW_RULES }}"
          for rule in "${cw_rules[@]}"; do
            [[ "$rule" == "dms-task-updater" ]] && component=dms || component=drs
            rule_name=mes-${{ inputs.tf-environment }}-${component}-${rule}
            aws events disable-rule --name ${rule_name} --region ${{ secrets.DVSA_AWS_REGION }}
          
            echo "üö´ $rule_name is now disabled."
          done

      - name: üîÑ Initialise TARS Replica
        uses: dvsa/des-workflow-actions/.github/actions/db-functions/run-db-script@main
        with:
          db-script-repo: dvsa/mes-data-poller-service
          db-script-branch: ${{ inputs.db-script-branch }}
          db-script-path: destination-db/database-initialisation
          db-cname: ${{ env.RDS_CREDENTIALS_TARS_DB_CNAME }}
          db-username: ${{ env.RDS_CREDENTIALS_TARS_DB_USERNAME }}
          db-password: ${{ env.RDS_CREDENTIALS_TARS_DB_PASSWORD }}

      - name: üèÉ Run Static Task Full Load
        run: |
          echo "‚è≥ Giving AWS checks a chance to complete"
          sleep 90

          aws dms start-replication-task --replication-task-arn ${{ steps.dms-tasks.outputs.static_task_arn }} \
          --region ${{ secrets.DVSA_AWS_REGION }} --start-replication-task-type reload-target --query 'ReplicationTask.Status'
          
          echo "‚è≥ Giving the task a minute to start"
          sleep 60

      - name: üèÉ Run DMS Task Updater
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/invoke-lambda-function@main
        with:
          function-name: mes-${{ inputs.tf-environment }}-dms-dms-task-updater
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ‚è≥ Wait for Static Task Full Load
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/wait-until-task-complete@main
        with:
          task-arn: ${{ steps.dms-tasks.outputs.static_task_arn }}
          task-wait-timeout: 6000
          sleep-time: ${{ inputs.full-load-sleep-time }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ‚è≥ Wait for Date Filtered Task Full Load
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/wait-until-task-complete@main
        with:
          task-arn: ${{ steps.dms-tasks.outputs.date_filtered_task_arn }}
          task-wait-timeout: 1200
          sleep-time: 60
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ‚èπÔ∏è Stop Static Task
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/stop-dms-task@main
        with:
          task-arn: ${{ steps.dms-tasks.outputs.static_task_arn }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ‚èπÔ∏è Stop Date Filtered Task
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/stop-dms-task@main
        with:
          task-arn: ${{ steps.dms-tasks.outputs.date_filtered_task_arn }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ‚è≥ Load TARS Replica Database Objects
        uses: dvsa/des-workflow-actions/.github/actions/db-functions/run-db-script@main
        with:
          db-script-repo: dvsa/mes-data-poller-service
          db-script-branch: ${{ inputs.db-script-branch }}
          db-script-path: destination-db/database-objects
          db-cname: ${{ env.RDS_CREDENTIALS_TARS_DB_CNAME }}
          db-username: ${{ env.RDS_CREDENTIALS_TARS_DB_USERNAME }}
          db-password: ${{ env.RDS_CREDENTIALS_TARS_DB_PASSWORD }}

      - name: ‚ñ∂Ô∏è Resume DMS Tasks
        run: |
          aws dms start-replication-task --replication-task-arn ${{ steps.dms-tasks.outputs.static_task_arn }} \
          --region ${{ secrets.DVSA_AWS_REGION }} --start-replication-task-type resume-processing --query 'ReplicationTask.Status'
          
          aws dms start-replication-task --replication-task-arn ${{ steps.dms-tasks.outputs.date_filtered_task_arn }} \
          --region ${{ secrets.DVSA_AWS_REGION }} --start-replication-task-type resume-processing --query 'ReplicationTask.Status'
          
          echo "‚ñ∂Ô∏è Tasks resumed."

      - name: ‚è≥ Wait for Static Task Full Load
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/wait-until-task-complete@main
        with:
          task-arn: ${{ steps.dms-tasks.outputs.static_task_arn }}
          task-wait-timeout: 600
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ‚è≥ Wait for Date Filtered Task Full Load
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/wait-until-task-complete@main
        with:
          task-arn: ${{ steps.dms-tasks.outputs.date_filtered_task_arn }}
          task-wait-timeout: 600
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: üèÉ Run Journals Poller
        uses: dvsa/des-workflow-actions/.github/actions/dms-functions/invoke-lambda-function@main
        with:
          function-name: mes-${{ inputs.tf-environment }}-drs-journals-poller
          interval: 180
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ‚úÖ Enable Pollers and DMS Task Updater
        if: github.event_name == 'workflow_call'
        run: |
          IFS=" " read -ra cw_rules <<< "${{ env.DES_GLOBALS_ENV_DMS_CW_RULES }}"
          for rule in "${cw_rules[@]}"; do
            [[ "$rule" == "dms-task-updater" ]] && component=dms || component=drs
            rule_name=mes-${{ inputs.tf-environment }}-${component}-${rule}
            aws events enable-rule --name ${rule_name} --region ${{ secrets.DVSA_AWS_REGION }}
          
            echo "‚úÖ $rule_name is now enabled."
          done
