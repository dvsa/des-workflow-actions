name: Deploy

on:
  workflow_call:
    inputs:
      service-name:
        type: string
        required: true
      audit:
        type: boolean
        default: true
        required: false
      audit-level:
        type: string
        required: false
        default: high
        
    secrets:
      DES_ACCESS_TOKEN:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      MSTEAMS_WEBHOOK:
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  run-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üì® Checkout
        uses: actions/checkout@v3

      - name: üîç Read .nvmrc
        id: nvm
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: ‚öôÔ∏è Setup Node.js ${{ env.NVMRC }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NVMRC }}
          cache: 'npm'

      - name: üîß Create .npmrc
        env:
          DES_ACCESS_TOKEN: ${{ secrets.DES_ACCESS_TOKEN }}
        run: |
          echo "//npm.pkg.github.com/:_authToken=$DES_ACCESS_TOKEN" >> ~/.npmrc

      - name: ‚ûï Install dependencies
        run: npm ci    

      - name: üïµÔ∏è‚Äç‚ôÄÔ∏è Audit production dependencies
        if: ${{ inputs.audit == true }}
        run: |
          mkdir reports
          npm audit --omit=dev --audit-level=${{ inputs.audit-level }} | tee reports/npm_audit.output

      - name: ‚öíÔ∏è Build project
        run: npm run compile-no-emit

      - name: üß™Ô∏è Execute unit tests
        run: | 
          mkdir -p reports
          npm run test:jasmine-coverage | tee reports/unit_tests.output

      - name: üì¶ Package for Lambda
        run: npm run package

      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: eu-west-1

      - name: ‚òÅÔ∏è Upload to GitHub Summary
        uses: actions/upload-artifact@v3
        with:
          name: '${{inputs.service-name}}-artefacts-${{github.run_id}}'
          path: |
            artefacts/*
            reports/*
          retention-days: 3

      - name: ‚òÅÔ∏è Upload to S3
        run: |
          for artefact in "artefacts"/*; do
            aws s3 cp "$artefact" \
            s3://mes-${{ secrets.AWS_ACCOUNT_ID }}-mgmt-mgmt-artefacts-repository/mes/gha/functions/"${artefact#artefacts/}"
            echo "‚úÖ Uploaded ${artefact#artefacts/} to S3" >> $GITHUB_STEP_SUMMARY
          done

      - name: ‚òÅÔ∏èÔ∏è Manifest
        id: manifest
        run: |
          version=$(jq -r ".version" < package.json | cut -d . -f 1,2)
          file_name="${{inputs.service-name}}_${version}.$(date +%s).manifest"
          echo "file_name=${file_name}" >> $GITHUB_OUTPUT
          
          for func in $(yq eval '.functions | keys' -o=json serverless.yml | jq -r '.[]'); do
            aws s3 ls \
            mes-${{ secrets.AWS_ACCOUNT_ID }}-mgmt-mgmt-artefacts-repository/mes/gha/functions/"$func" \
            | sort -r | head -n 1 | cut -d '-' -f 4-
            
            echo "${func}_version = ${version}" >> $file_name
          done

          aws s3 cp $file_name s3://mes-${{ secrets.AWS_ACCOUNT_ID }}-mgmt-mgmt-artefacts-repository/mes/gha/releases/
          echo "‚úÖ Uploaded: $file_name" >> $GITHUB_STEP_SUMMARY

      - name: ‚òÅÔ∏è Upload Test Reports to S3
        run: |
          name=${{steps.manifest.outputs.file_name}}
          FILE="TestReports-${name/"manifest"/"zip"}"
          zip -r $FILE reports/
          aws s3 cp $FILE \
          s3://mes-${{ secrets.AWS_ACCOUNT_ID }}-mgmt-mgmt-artefacts-repository/mes/gha/microservices/${{inputs.service-name}}/test-reports/
          echo "‚úÖ Uploaded ${FILE} to S3 " >> $GITHUB_STEP_SUMMARY

      - name: üîî Send MS Teams Notification
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          job: ${{ toJson(job) }}
          needs: ${{ toJson(needs) }}
          steps: ${{ toJson(steps) }}
