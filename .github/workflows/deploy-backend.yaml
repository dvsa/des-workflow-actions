name: Deploy

on:
  workflow_call:
    inputs:
      audit:
        description: Whether an audit should be run to detect vulnerabilities in packages
        type: boolean
        default: true
        required: false
      audit-level:
        description: Minimum level at which the audit check should fail if detected
        type: string
        required: false
        default: high
      component:
        description: The associated Terraform component for the service
        type: string
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  run-deploy:
    runs-on: ubuntu-latest
    outputs:
      job_context: ${{ steps.set-outputs.outputs.job_context }}
      steps_context: ${{ steps.set-outputs.outputs.steps_context }}

    steps:
      - name: 📨 Checkout
        uses: actions/checkout@v3

      - name: 🔍 Read .nvmrc
        id: nvm
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: 🔍 Determine service name
        run: echo "SERVICE_NAME=$(jq -r '.name | sub("mes-"; "") | sub ("-service"; "")' package.json)" >> $GITHUB_ENV

      - name: ⚙️ Setup Node.js ${{ env.NVMRC }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NVMRC }}
          cache: 'npm'

      - name: 🔧 Create .npmrc
        env:
          DES_ACCESS_TOKEN: ${{ secrets.DES_ACCESS_TOKEN }}
        run: |
          echo "//npm.pkg.github.com/:_authToken=$DES_ACCESS_TOKEN" >> ~/.npmrc

#      - name: ➕ Install dependencies
#        id: npm-ci
#        run: npm ci

      - name: 🕵️‍♀️ Audit production dependencies
        if: ${{ inputs.audit == true }}
        id: npm-audit
        run: |
          mkdir reports
          npm audit --omit=dev --audit-level=${{ inputs.audit-level }} | tee reports/npm_audit.output

#      - name: ⚒️ Build project
#        id: npm-compile
#        run: npm run compile-no-emit

#      - name: 🧪️ Execute unit tests
#        id: npm-test
#        run: |
#          mkdir -p reports
#          npm run test:jasmine-coverage | tee reports/unit_tests.output

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: 🤫 Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

#      - name: 📦 Package for Lambda
#        id: npm-package
#        run: npm run package
#
#      - name: ☁️ Upload to GitHub Summary
#        uses: actions/upload-artifact@v3
#        with:
#          name: '${{env.SERVICE_NAME}}-artefacts-${{github.run_id}}'
#          path: |
#            artefacts/*
#            reports/*
#          retention-days: 3

  #      - name: ☁️ Upload to S3
  #        id: s3-upload-artefacts
  #        run: |
  #          echo "## Artefacts:" >> $GITHUB_STEP_SUMMARY
  #          for artefact in "artefacts"/*; do
  #            aws s3 cp "$artefact" \
  #            s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/functions/"${artefact#artefacts/}"
  #            echo "✅ Uploaded ${artefact#artefacts/} to S3" >> $GITHUB_STEP_SUMMARY
  #          done
  #
  #      - name: ☁️️ Manifest
  #        id: create_manifest
  #        run: |
  #          version=$(jq -r ".version" < package.json | cut -d . -f 1,2)
  #          file_name="${{env.SERVICE_NAME}}_${version}.$(date +%s).manifest"
  #          echo "file_name=${file_name}" >> $GITHUB_OUTPUT
  #
  #          for func in $(yq eval '.functions | keys' -o=json serverless.yml | jq -r '.[]'); do
  #            function_version=$(aws s3 ls \
  #            ${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/functions/"$func" \
  #            | sort -r | head -n 1 | cut -d '-' -f 4-)
  #
  #            echo "${func}_version = ${function_version}" >> $file_name
  #          done
  #
  #          aws s3 cp $file_name s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/releases/
  #          echo "## Manifests:" >> $GITHUB_STEP_SUMMARY
  #          echo "✅ Uploaded $file_name to S3" >> $GITHUB_STEP_SUMMARY
  #
  #      - name: ☁️ Upload Test Reports to S3
  #        id: s3-upload-reports
  #        run: |
  #          name=${{steps.create_manifest.outputs.file_name}}
  #          FILE="TestReports-${name/"manifest"/"zip"}"
  #          zip -r $FILE reports/
  #          aws s3 cp $FILE \
  #          s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/microservices/${{env.SERVICE_NAME}}/test-reports/
  #          echo "## Reports" >> $GITHUB_STEP_SUMMARY
  #          echo "✅ Uploaded ${FILE} to S3" >> $GITHUB_STEP_SUMMARY
  #
  #      - name: 🔑 Configure NonProd AWS Credentials
  #        uses: aws-actions/configure-aws-credentials@v3
  #        with:
  #          role-to-assume: arn:aws:iam::${{ secrets.AWS_NONPROD_ACCOUNT_ID }}:role/github-actions
  #          aws-region: ${{ secrets.DVSA_AWS_REGION }}
  #
  #      - name: 🚀 Deploy Lambda Package
  #        id: deploy-lambda-package
  #        run: |
  #          echo "## Deployments:" >> $GITHUB_STEP_SUMMARY
  #          for func in $(yq eval '.functions | keys' -o=json serverless.yml | jq -r '.[]'); do
  #            artefact_file_name=$(find artefacts -type f -name ${func}*)
  #            lambda_function_name=$(aws lambda list-functions \
  #            --query "Functions[?starts_with(FunctionName, 'mes-dev-${{ inputs.component }}') \
  #            && Handler == '${func}.handler'].FunctionName" | jq -r '.[]')
  #
  #            if [[ -z $lambda_function_name ]]; then
  #              echo "No equivalent Lambda function found for ${func}. Deployment aborted."
  #              exit 1
  #            fi
  #
  #            aws lambda update-function-code --function-name $lambda_function_name \
  #            --zip-file fileb://${artefact_file_name} \
  #            --query "{FunctionName: FunctionName, LastUpdateStatus: LastUpdateStatus}"
  #
  #            aws lambda wait function-updated --function-name $lambda_function_name
  #            status=$(aws lambda get-function-configuration --function-name $lambda_function_name \
  #            --query "LastUpdateStatus" --output text)
  #
  #            if [ $status == "Failed" ]; then
  #              echo "Failed to update ${lambda_function_name}."
  #              exit 1
  #            fi
  #
  #            echo "Successfully updated ${lambda_function_name}."
  #            echo "✅ Deployed $artefact_file_name to Lambda" >> $GITHUB_STEP_SUMMARY
  #          done
      - name: Set Outputs
        id: set-outputs
        run: |
          echo job_context=$(echo '${{ toJSON(job) }}' | jq -c) >> $GITHUB_OUTPUT
          echo steps_context=$(echo '${{ toJSON(steps) }}' | jq -c) >> $GITHUB_OUTPUT

  run-sonar-scan:
    runs-on: mito-2
    outputs:
      job_context: ${{ steps.set-outputs.outputs.job_context }}
      steps_context: ${{ steps.set-outputs.outputs.steps_context }}

    steps:
      - name: 📨 Checkout
        uses: actions/checkout@v3

      - name: 🔍 Read .nvmrc
        id: nvm
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: 🔍 Determine service name
        run: echo "SERVICE_NAME=$(jq -r '.name | sub("mes-"; "") | sub ("-service"; "")' package.json)" >> $GITHUB_ENV

#      - name: ⚙️ Setup Node.js ${{ env.NVMRC }}
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ env.NVMRC }}
#          cache: 'npm'

#      - name: 🔧 Create .npmrc
#        env:
#          DES_ACCESS_TOKEN: ${{ secrets.DES_ACCESS_TOKEN }}
#        run: |
#          echo "//npm.pkg.github.com/:_authToken=$DES_ACCESS_TOKEN" >> ~/.npmrc
#
#      - name: ➕ Install dependencies
#        id: npm-ci
#        run: npm ci

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: 🤫 Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: 🧐 SonarQube Scan
        id: sonarqube-scan
        run: |
          cat <<EOF > sonar-project.properties
          sonar.projectKey=mes-${{ env.SERVICE_NAME }}-service
          sonar.login=${{ env.DES_GLOBALS_ENV_SONAR_TOKEN }}
          sonar.host.url=${{ env.DES_GLOBALS_ENV_SONAR_HOST_URL }}
          sonar.sources=src
          sonar.exclusions=src/**/__tests__/**/*,src/**/__mocks__/**/*
          sonar.typescript.lcov.reportPaths=coverage/lcov.info
          EOF

#          npm run sonar-scanner

#          export SONAR_TOKEN=${{ env.DES_GLOBALS_ENV_SONAR_TOKEN }}
#
#          sonar-scanner \
#          -Dsonar.host.url=${{ env.DES_GLOBALS_ENV_SONAR_HOST_URL }} \
#          -Dsonar.sources=src \
#          -Dsonar.exclusions=src/**/__tests__/**/*,src/**/__mocks__/**/* \
#          -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info

      - name: Set Outputs
        id: set-outputs
        run: |
          echo job_context=$(echo '${{ toJSON(job) }}' | jq -c) >> $GITHUB_OUTPUT
          echo steps_context=$(echo '${{ toJSON(steps) }}' | jq -c) >> $GITHUB_OUTPUT

  send-teams-notification:
    if: always()
    needs: [run-deploy, run-sonar-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Get Job Context
        id: context
        run: |
          count=0
          mkdir steps
          echo '${{ toJSON(needs) }}' | jq -c >> needs.json

          for job in $(jq -c '.[]' needs.json); do
            job_status=$(echo "$job" | jq -r '.result')
            echo "$job" | jq -r '.outputs.steps_context' > ./steps/job-${count}.json
            if [ $job_status == 'failure' ] || [ $job_status == 'cancelled' ]; then
              result=$job_status
              job_context=
            fi
            count=$((count + 1))
          done
          
          if [ $result ]; then
            job_context="{\"status\":\"${result}\"}"
          else
            job_context="{\"status\":\"success\"}"
          fi
          
          echo $job_context
          steps_combined=$(jq -c -s 'reduce .[] as $item ({}; . * $item)' ./steps/*.json)
          echo $steps_combined
          echo "job_context=$job_context" >> $GITHUB_OUTPUT
          echo "steps_context=$(echo $steps_combined)" >> $GITHUB_OUTPUT
#          echo steps_context=$(echo '${{ toJSON(steps) }}' | jq -c) >> $GITHUB_OUTPUT
#          echo '${{ toJSON(needs) }}' | jq -c >> needs_context.json
#          jq 'to_entries | map({(.key): .value})' needs_context.json

#          for job in $(jq -c '.[]' <<< ${{ toJSON(needs) }}); do
#            job_status=$(echo "$job" | jq -r '.outputs.job_context')
#            if [ $job_status == 'failure' ] || [ $job_status == 'cancelled' ]; then
#              break
#            fi
#          done
#
#          echo "job=${job_status}" >> $GITHUB_OUTPUT
#
#          echo '${{ needs.build.outputs.steps_context }}' >> file1.json
#          echo '${{ needs.job-2.outputs.steps_context }}'  >> file2.json
#
#          combined_json=$(jq -s '.[0] * .[1]' file1.json file2.json)
#
#          echo $combined_json
#

      - name: test
        run: |
          echo "test step"
          echo "${{ toJson(steps.context.outputs.job_context) }}"
          echo "${{ toJson(steps.context.outputs.steps_context) }}"
#          echo ${{ steps.context.outputs.steps_context }}
#          echo "${{ toJson(steps.context.outputs.steps_context) }}"
#          echo ${{ fromJson(steps.context.outputs.steps_context) }}
#          echo "${{ toJSON(job) }}"

      - name: 🔔 Send MS Teams Notification
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          job: $( echo steps.context.outputs.job_context | sed "s/"/\\\"/g")
          needs: ${{ toJson(needs) }}
          steps: ${{ toJson(steps.context.outputs.steps_context) }}
          overwrite: "{title: `${{github.repository}} | ${{github.workflow}} | BY: ${{github.actor}}`}"
