name: 🚀 Deploy

on:
  workflow_call:
    inputs:
      audit:
        description: Whether an audit should be run to detect vulnerabilities in packages
        type: boolean
        default: true
        required: false
      audit-level:
        description: Minimum level at which the audit check should fail if detected
        type: string
        required: false
        default: high
      component:
        description: The associated Terraform component for the service
        type: string
        required: true
      branch:
        description: The branch of the service to build the artefact/s from
        type: string
        default: develop

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      service-name: ${{ steps.set-outputs.outputs.service-name }}
      job-context: ${{ steps.set-outputs.outputs.job-context }}
      steps-context: ${{ steps.set-outputs.outputs.steps-context }}

    steps:
      - name: 📨 Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: ⚙️ Set Up Node
        id: node-setup
        uses: dvsa/des-workflow-actions/.github/actions/setup-node@main
        with:
          access-token: ${{ secrets.DES_ACCESS_TOKEN }}

      - name: 🕵️‍♀️ Audit production dependencies
        if: ${{ inputs.audit == true }}
        id: npm-audit
        run: |
          mkdir reports
          npm audit --omit=dev --audit-level=${{ inputs.audit-level }} | tee reports/npm_audit.output

      - name: ⚒️ Build project
        id: npm-compile
        run: npm run compile-no-emit

      - name: 🧪️ Execute unit tests
        id: npm-test
        run: |
          mkdir -p reports
          
          if [[ "${{ github.event.repository.name }}" == "des-mot-service" ]]; then
            npm run test:coverage | tee reports/unit_tests.output
          else
            npm run test:jasmine-coverage | tee reports/unit_tests.output
          fi

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: 🤫 Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: 📦 Package for Lambda
        id: npm-package
        run: npm run package

      - name: ☁️ Upload to GitHub Summary
        uses: actions/upload-artifact@v4
        with:
          name: '${{env.SERVICE_NAME}}-artefacts-${{github.run_id}}'
          path: |
            artefacts/*
            reports/*
            coverage/*
          retention-days: 3

      - name: ☁️ Upload to S3
        id: s3-upload-artefacts
        run: |
          echo "## Artefacts:" >> $GITHUB_STEP_SUMMARY
          for artefact in "artefacts"/*; do
            aws s3 cp "$artefact" \
            s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/functions/"${artefact#artefacts/}"
            echo "✅ Uploaded ${artefact#artefacts/} to S3" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "VERSION=$(ls artefacts/ | grep -v 'coverage' | head -n 1 | cut -d '-' -f 2)" >> $GITHUB_ENV
          echo "GIT_REV=$(ls artefacts/ | grep -v 'coverage' | head -n 1 | cut -d - -f 3 | cut -d . -f 1 )" >> $GITHUB_ENV

      - name: ☁️️ Manifest
        if: ${{ !startsWith(inputs.branch, 'release-') }}
        id: create_manifest
        run: |
          file_name="${{ env.SERVICE_NAME }}_${{ env.VERSION }}-${{ env.GIT_REV }}.manifest"
          for func in $(yq eval '.functions | keys' -o=json serverless.yml | jq -r '.[]'); do
            echo "${func}_version = \"${{ env.VERSION }}-${{ env.GIT_REV }}.zip\"" >> $file_name
          done

          aws s3 cp $file_name s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/manifests/dev/

          echo "## Manifests:" >> $GITHUB_STEP_SUMMARY
          echo "✅ Uploaded $file_name to S3" >> $GITHUB_STEP_SUMMARY

      - name: ☁️ Upload Test Reports to S3
        id: s3-upload-reports
        run: |
          FILE="TestReports-${{ env.SERVICE_NAME }}-${{ env.VERSION }}-${{ env.GIT_REV }}.zip"
          zip -r $FILE reports/
          aws s3 cp $FILE \
          s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/microservices/${{env.SERVICE_NAME}}/test-reports/
          echo "## Reports" >> $GITHUB_STEP_SUMMARY
          echo "✅ Uploaded ${FILE} to S3" >> $GITHUB_STEP_SUMMARY

      - name: ➡️ Set Outputs
        if: always()
        id: set-outputs
        run: |
          echo service-name=${{ env.SERVICE_NAME }} >> $GITHUB_OUTPUT
          echo job-context=$(echo '${{ toJSON(job) }}' | jq -c) >> $GITHUB_OUTPUT
          echo steps-context=$(echo '${{ toJSON(steps) }}' | jq -c) >> $GITHUB_OUTPUT

  deploy:
    needs: build
    if: ${{ !startsWith(inputs.branch, 'release-') }}
    runs-on: ubuntu-latest
    outputs:
      job-context: ${{ steps.set-outputs.outputs.job-context }}
      steps-context: ${{ steps.set-outputs.outputs.steps-context }}

    steps:
      - name: 📨 Checkout
        uses: actions/checkout@v4

      - name: ☁️ Download Artefacts
        uses: actions/download-artifact@v4
        with:
          name: '${{needs.build.outputs.service-name}}-artefacts-${{github.run_id}}'

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: 🔑 Configure NonProd AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_NONPROD_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: 🚀 Deploy Lambda Package
        id: deploy-lambda-package
        run: |
          echo "## Deployments:" >> $GITHUB_STEP_SUMMARY
          for func in $(yq eval '.functions | keys' -o=json serverless.yml | jq -r '.[]'); do
            artefact_file_name=$(find artefacts -type f -name ${func}*)
            lambda_function_name=$(aws lambda list-functions \
            --query "Functions[?starts_with(FunctionName, 'mes-dev-${{ inputs.component }}') \
            && Handler == '${func}.handler'].FunctionName" | jq -r '.[]')
  
            if [[ -z $lambda_function_name ]]; then
              echo "No equivalent Lambda function found for ${func}. Deployment aborted."
              exit 1
            fi
          
            aws lambda update-function-code --function-name $lambda_function_name \
            --zip-file fileb://${artefact_file_name} \
            --query "{FunctionName: FunctionName, LastUpdateStatus: LastUpdateStatus}"
  
            aws lambda wait function-updated --function-name $lambda_function_name
            status=$(aws lambda get-function-configuration --function-name $lambda_function_name \
            --query "LastUpdateStatus" --output text)
          
            if [ $status == "Failed" ]; then
              echo "Failed to update ${lambda_function_name}."
              exit 1
            fi
  
            echo "Successfully updated ${lambda_function_name}."
            echo "✅ Deployed $artefact_file_name to Lambda" >> $GITHUB_STEP_SUMMARY
          done

      - name: ➡️ Set Outputs
        if: always()
        id: set-outputs
        run: |
          echo job-context=$(echo '${{ toJSON(job) }}' | jq -c) >> $GITHUB_OUTPUT
          echo steps-context=$(echo '${{ toJSON(steps) }}' | jq -c) >> $GITHUB_OUTPUT

  sonar-scan:
    name: 📡 SonarQube Scan
    if: github.event_name == 'push' && github.ref_name == 'develop'
    uses: dvsa/des-workflow-actions/.github/workflows/sonarqube-scan.yaml@MES-10445-sonarqube-scan
    with:
      test-script-name: 'test:jasmine-coverage'
    secrets: inherit

  send-teams-notification:
    if: always()
    needs: [build, deploy, sonar-scan]
    runs-on: ubuntu-latest
    steps:
      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: 🤫 Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: 📝 Generate MS Teams Notify JSON
        id: ms-teams-json
        uses: dvsa/des-workflow-actions/.github/actions/generate-ms-teams-json@main
        with:
          needs-context: ${{ toJSON(needs) }}

      - name: 🔔 Send MS Teams Notification
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ env.DES_GLOBALS_ENV_MSTEAMS_WEBHOOK_SERVICE_BUILDS }}
          job: ${{ steps.ms-teams-json.outputs.job-context }}
          needs: ${{ toJson(needs) }}
          steps: ${{ steps.ms-teams-json.outputs.steps-context }}
          overwrite: "{title: `${{github.repository}} | ${{github.workflow}} | BY: ${{github.actor}}`}"
