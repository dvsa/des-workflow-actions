name: Deploy

on:
  workflow_call:
    inputs:
      audit:
        description: Whether an audit should be run to detect vulnerabilities in packages
        type: boolean
        default: true
        required: false
      audit-level:
        description: Minimum level at which the audit check should fail if detected
        type: string
        required: false
        default: high
      component:
        description: The associated Terraform component for the service
        type: string
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  run-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üì® Checkout
        uses: actions/checkout@v3

      - name: üîç Read .nvmrc
        id: nvm
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_ENV

      - name: üîç Determine service name
        run: echo "SERVICE_NAME=$(jq -r '.name | sub("mes-"; "") | sub ("-service"; "")' package.json)" >> $GITHUB_ENV

      - name: ‚öôÔ∏è Setup Node.js ${{ env.NVMRC }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NVMRC }}
          cache: 'npm'

      - name: üîß Create .npmrc
        env:
          DES_ACCESS_TOKEN: ${{ secrets.DES_ACCESS_TOKEN }}
        run: |
          echo "//npm.pkg.github.com/:_authToken=$DES_ACCESS_TOKEN" >> ~/.npmrc

      - name: ‚ûï Install dependencies
        id: npm-ci
        run: npm ci

      - name: üïµÔ∏è‚Äç‚ôÄÔ∏è Audit production dependencies
        if: ${{ inputs.audit == true }}
        id: npm-audit
        run: |
          mkdir reports
          npm audit --omit=dev --audit-level=${{ inputs.audit-level }} | tee reports/npm_audit.output

      - name: ‚öíÔ∏è Build project
        id: npm-compile
        run: npm run compile-no-emit

      - name: üß™Ô∏è Execute unit tests
        id: npm-test
        run: |
          mkdir -p reports
          npm run test:jasmine-coverage | tee reports/unit_tests.output

      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ü§´ Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: üßê SonarQube Scan
        id: sonarqube-scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ env.DES_GLOBALS_ENV_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.DES_GLOBALS_ENV_SONAR_HOST_URL }}
          args: >
            "-Dsonar.projectKey=mes-${{ env.SERVICE_NAME }}-service"
            -Dsonar.sources=src
            -Dsonar.exclusions=src/**/__tests__/**/*,src/**/__mocks__/**/*
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info

      - name: üì¶ Package for Lambda
        id: npm-package
        run: npm run package

      - name: ‚òÅÔ∏è Upload to GitHub Summary
        uses: actions/upload-artifact@v3
        with:
          name: '${{env.SERVICE_NAME}}-artefacts-${{github.run_id}}'
          path: |
            artefacts/*
            reports/*
          retention-days: 3

      - name: ‚òÅÔ∏è Upload to S3
        id: s3-upload-artefacts
        run: |
          echo "## Artefacts:" >> $GITHUB_STEP_SUMMARY
          for artefact in "artefacts"/*; do
            aws s3 cp "$artefact" \
            s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/functions/"${artefact#artefacts/}"
            echo "‚úÖ Uploaded ${artefact#artefacts/} to S3" >> $GITHUB_STEP_SUMMARY
          done

      - name: ‚òÅÔ∏èÔ∏è Manifest
        id: create_manifest
        run: |
          version=$(jq -r ".version" < package.json | cut -d . -f 1,2)
          file_name="${{env.SERVICE_NAME}}_${version}.$(date +%s).manifest"
          echo "file_name=${file_name}" >> $GITHUB_OUTPUT
          
          for func in $(yq eval '.functions | keys' -o=json serverless.yml | jq -r '.[]'); do
            function_version=$(aws s3 ls \
            ${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/functions/"$func" \
            | sort -r | head -n 1 | cut -d '-' -f 4-)
          
            echo "${func}_version = ${function_version}" >> $file_name
          done

          aws s3 cp $file_name s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/releases/
          echo "## Manifests:" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Uploaded $file_name to S3" >> $GITHUB_STEP_SUMMARY

      - name: ‚òÅÔ∏è Upload Test Reports to S3
        id: s3-upload-reports
        run: |
          name=${{steps.create_manifest.outputs.file_name}}
          FILE="TestReports-${name/"manifest"/"zip"}"
          zip -r $FILE reports/
          aws s3 cp $FILE \
          s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/microservices/${{env.SERVICE_NAME}}/test-reports/
          echo "## Reports" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Uploaded ${FILE} to S3" >> $GITHUB_STEP_SUMMARY

      - name: üîë Configure NonProd AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_NONPROD_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: üöÄ Deploy Lambda Package
        id: deploy-lambda-package
        run: |
          echo "## Deployments:" >> $GITHUB_STEP_SUMMARY
          for func in $(yq eval '.functions | keys' -o=json serverless.yml | jq -r '.[]'); do       
            artefact_file_name=$(find artefacts -type f -name ${func}*)     
            lambda_function_name=$(aws lambda list-functions \
            --query "Functions[?starts_with(FunctionName, 'mes-dev-${{ inputs.component }}') \
            && Handler == '${func}.handler'].FunctionName" | jq -r '.[]')
            
            if [[ -z $lambda_function_name ]]; then
              echo "No equivalent Lambda function found for ${func}. Deployment aborted."
              exit 1
            fi

            aws lambda update-function-code --function-name $lambda_function_name \
            --zip-file fileb://${artefact_file_name} \
            --query "{FunctionName: FunctionName, LastUpdateStatus: LastUpdateStatus}"
            
            aws lambda wait function-updated --function-name $lambda_function_name
            status=$(aws lambda get-function-configuration --function-name $lambda_function_name \
            --query "LastUpdateStatus" --output text)

            if [ $status == "Failed" ]; then
              echo "Failed to update ${lambda_function_name}."
              exit 1
            fi
            
            echo "Successfully updated ${lambda_function_name}."
            echo "‚úÖ Deployed $artefact_file_name to Lambda" >> $GITHUB_STEP_SUMMARY
          done

      - name: üîî Send MS Teams Notification
        if: always()
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ secrets.MSTEAMS_WEBHOOK }}
          job: ${{ toJson(job) }}
          needs: ${{ toJson(needs) }}
          steps: ${{ toJson(steps) }}
          overwrite: "{title: `${{github.repository}} | ${{github.workflow}} | BY: ${{github.actor}}`}"
