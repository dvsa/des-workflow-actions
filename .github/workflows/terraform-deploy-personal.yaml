name: üöÄ Terraform Deploy (Personal Environment)
on:
  workflow_call:
    inputs:
      branch:
        description: The Terraform branch to deploy
        type: string
        required: true
      aws-account:
        description: The AWS account to deploy to
        type: string
        required: true
      tf-environment:
        description: The Terraform environment to deploy to
        type: string
        required: true
      tf-action:
        description: The Terraform action to take (apply/destroy)
        type: string
        required: true
      initialise-results-db:
        description: Whether to initialise the results database
        type: boolean
        default: false
        required: false
      load-dynamodb-test-data:
        description: Whether to load the DynamoDB test data
        type: boolean
        required: false
      dynamodb-test-data-branch:
        description: DynamoDB Test Data Branch
        type: string
        required: false

permissions:
  id-token: write
  contents: write

jobs:
  start-ec2-runner:
    name: ‚ñ∂Ô∏è Start EC2 Runner
    uses: dvsa/des-workflow-actions/.github/workflows/manage-gha-tf-runner.yaml@main
    with:
      action: start
      aws-account: ${{ inputs.aws-account }}
    secrets: inherit

  set-tf-args:
    name: ‚öôÔ∏è Set Terraform Arguments
    needs: start-ec2-runner
    if: always() && !failure() && !cancelled()
    runs-on: ${{ needs.start-ec2-runner.outputs.runner-label }}
    outputs:
      first-run: ${{ steps.determine-if-deployed.outputs.first-run }}
      api-args: ${{ steps.set-tf-args.outputs.api-args }}
      api-second-run-args: ${{ steps.set-tf-args.outputs.api-second-run-args }}

    steps:
      - name: üïµÔ∏è Determine if First Run
        id: determine-if-deployed
        run: |
          tag_name="mes-${{ inputs.tf-environment }}-drs/tars_replica_vpc_endpoint_service"
          
          service_name=$(aws ec2 describe-vpc-endpoint-services --region ${{ secrets.DVSA_AWS_REGION }} \
          --query "ServiceDetails[?Tags[?Key=='Name'&&Value=='$tag_name']].ServiceName")
          
          [ "$service_name" == "[]" ] && first_run=true || first_run=false
          
          echo "first-run=$first_run" >> $GITHUB_OUTPUT

      - name: ‚öôÔ∏è Set Terraform Arguments
        if: steps.determine-if-deployed.outputs.first-run == 'true' || inputs.tf-action == 'destroy'
        id: set-tf-args
        run: |
          if [ "${{ inputs.tf-action }}" == "apply" ]; then
            api_args="-var='first_run=true'"
          
            api_second_run_args="\
            -target=terraform_remote_state.drs \
            -target=aws_iam_policy_document.ref_data_rds_access \
            -target=aws_iam_policy.ref_data_rds_access \
            -target=aws_iam_policy_attachment.ref_data_rds_access \
            -target=aws_vpc_endpoint.tars_replica \
            -target=module.lambda_ref_data_test_centres_get"
          fi
          
          if [ "${{ inputs.tf-action }}" == "destroy" ]; then        
            api_args="\
            -target=terraform_remote_state.drs \
            -target=aws_iam_policy_document.ref_data_rds_access \
            -target=aws_iam_policy.ref_data_rds_access \
            -target=aws_iam_policy_attachment.ref_data_rds_access \
            -target=aws_vpc_endpoint.tars_replica"
          
            api_second_run_args="-var='first_run=true'"
          fi
          
          echo "api-args=$api_args" >> $GITHUB_OUTPUT
          echo "api-second-run-args=$api_second_run_args" >> $GITHUB_OUTPUT

  deploy-api:
    name: üß© API
    needs: [start-ec2-runner, set-tf-args]
    if: always() && !failure() && !cancelled()
    strategy:
      max-parallel: 1
      matrix:
        tf-action: [plan, "${{ inputs.tf-action }}"]
    uses: dvsa/des-workflow-actions/.github/workflows/terraform-action.yaml@main
    with:
      runner: ${{ needs.start-ec2-runner.outputs.runner-label }}
      branch: ${{ inputs.branch }}
      aws-account: ${{ inputs.aws-account }}
      tf-environment: ${{ inputs.tf-environment }}
      tf-component: api
      tf-args: ${{ needs.set-tf-args.outputs.api-args }}
      tf-action: ${{ matrix.tf-action }}
      artifact-name-prefix: 0
    secrets: inherit

  deploy-drs:
    name: üß© DRS
    needs: [start-ec2-runner, deploy-api]
    if: always() && !failure() && !cancelled()
    strategy:
      max-parallel: 1
      matrix:
        tf-action: [plan, "${{ inputs.tf-action }}"]
    uses: dvsa/des-workflow-actions/.github/workflows/terraform-action.yaml@main
    with:
      runner: ${{ needs.start-ec2-runner.outputs.runner-label }}
      branch: ${{ inputs.branch }}
      aws-account: ${{ inputs.aws-account }}
      tf-environment: ${{ inputs.tf-environment }}
      tf-component: drs
      tf-args: ${{ inputs.tf-args }}
      tf-action: ${{ matrix.tf-action }}
      artifact-name-prefix: 1
    secrets: inherit

  deploy-api-2nd-run:
    name: üß© API 2nd Run
    needs: [start-ec2-runner, deploy-drs]
    if: always() && !failure() && !cancelled() && (needs.set-tf-args.outputs.first-run == 'true' || inputs.tf-action == 'destroy')
    strategy:
      max-parallel: 1
      matrix:
        tf-action: [plan, "${{ inputs.tf-action }}"]
    uses: dvsa/des-workflow-actions/.github/workflows/terraform-action.yaml@main
    with:
      runner: ${{ needs.start-ec2-runner.outputs.runner-label }}
      branch: ${{ inputs.branch }}
      aws-account: ${{ inputs.aws-account }}
      tf-environment: ${{ inputs.tf-environment }}
      tf-component: api
      tf-args: ${{ needs.set-tf-args.outputs.api-second-run-args }}
      tf-action: ${{ matrix.tf-action }}
      artifact-name-prefix: 2
    secrets: inherit

  delete-log-groups:
    name: üóëÔ∏è Delete Log Groups
    needs: [start-ec2-runner, deploy-api-2nd-run]
    if: always() && !failure() && !cancelled() && inputs.tf-action == 'destroy'
    runs-on: ${{ needs.start-ec2-runner.outputs.runner-label }}
    steps:
      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_NONPROD }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}
          role-session-name: Terraform-GHA

      - name: üóëÔ∏è Delete Log Groups
        run: |
          aws logs delete-log-group --log-group-name /aws/rds/cluster/mes-${{ inputs.tf-environment }}-api-mes-db/error \
          --region ${{ secrets.DVSA_AWS_REGION }}
          aws logs delete-log-group --log-group-name /aws/rds/cluster/mes-${{ inputs.tf-environment }}-drs-tars-replica/error \
          --region ${{ secrets.DVSA_AWS_REGION }}

  initialise-results-db:
    name: ‚ú® Initialise Results DB & Results User
    needs: [start-ec2-runner, delete-log-groups]
    if: always() && !failure() && !cancelled() && inputs.initialise-results-db == true
    runs-on: ${{ needs.start-ec2-runner.outputs.runner-label }}
    steps:
      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_NONPROD }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}
          role-session-name: Terraform-GHA

      - name: ü§´ Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: RDS_CREDENTIALS, des-dev-rds-credentials
          parse-json-secrets: true

      - name: ‚ú® Initialise Results DB
        uses: dvsa/des-workflow-actions/.github/actions/db-functions/run-db-script@main
        with:
          db-script-repo: dvsa/des-results-db
          db-script-branch: master
          db-script-path: database-setup
          db-cname: ${{ env.RDS_CREDENTIALS_RESULTS_DB_CNAME }}
          db-username: ${{ env.RDS_CREDENTIALS_RESULTS_DB_USERNAME }}
          db-password: ${{ env.RDS_CREDENTIALS_RESULTS_DB_PASSWORD }}

      - name: ‚ú® Create Results User
        uses: dvsa/des-workflow-actions/.github/actions/db-functions/run-db-script@main
        with:
          db-script-repo: dvsa/des-results-db
          db-script-branch: master
          db-script-path: user-creation
          db-cname: mes-db.api.${{ inputs.tf-environment }}.${{ env.RDS_CREDENTIALS_PERSONAL_RESULTS_DB_CNAME }}
          db-username: mes${{ inputs.tf-environment }}${{ env.RDS_CREDENTIALS_PERSONAL_RESULTS_DB_USERNAME }}
          db-password: ${{ env.RDS_CREDENTIALS_RESULTS_DB_PASSWORD }}

  load-test-data:
    name: ‚è≥ Load Journals & Users Test Data
    needs: [start-ec2-runner, initialise-results-db]
    if: always() && !failure() && !cancelled() && inputs.load-dynamodb-test-data == true
    runs-on: ${{ needs.start-ec2-runner.outputs.runner-label }}
    steps:
      - name: üì® Checkout Test Data Repository
        uses: actions/checkout@v4
        with:
          repository: dvsa/des-test-data-journal
          ref: ${{ inputs.dynamodb-test-data-branch }}
          ssh-key: ${{ secrets.TEST_DATA_JOURNAL_KEY }}

      - name: ‚öôÔ∏è Setup Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: ‚ûï Install Boto3
        run: pip install boto3

      - name: ‚ûï Install Requirements
        run: python -m pip install -r requirements.txt --user

      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_NONPROD }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}
          role-session-name: Terraform-GHA

      - name: ‚è≥ Load Tables
        run: |
          python ./load_test_user_data.py ${{ inputs.tf-environment }}
          python ./load_test_journal_data.py ${{ inputs.tf-environment }}

  stop-ec2-runner:
    name: ‚èπÔ∏è Stop EC2 Runner
    needs: [start-ec2-runner, load-test-data]
    if: always()
    uses: dvsa/des-workflow-actions/.github/workflows/manage-gha-tf-runner.yaml@main
    with:
      action: stop
      aws-account: ${{ inputs.aws-account }}
      runner-label: ${{ needs.start-ec2-runner.outputs.runner-label }}
      ec2-instance-id: ${{ needs.start-ec2-runner.outputs.ec2-instance-id }}
    secrets: inherit
