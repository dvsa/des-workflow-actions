name: üì± Build Mobile App
on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        required: true
      branch:
        type: string
        required: false
      environment:
        type: string
        required: true
      config-type:
        type: string
        required: true
      build-type:
        type: string
        required: false
        default: test
      build-simulator:
        type: string
        required: false
        default: false
      build-ipa:
        type: string
        required: false
        default: true
      upload_path:
        type: string
        required: true

    secrets:
      AWS_ROLE:
        required: true
      WEBHOOK_URL:
        required: true

permissions:
  contents: write
  id-token: write

jobs:
  build-mobile-app:
    name: üì± Build Mobile App (${{ inputs.environment }})
    runs-on: ${{ inputs.runs-on }}
    env:
      RUN_ID: ${{ github.run_id }}
      GH_REF_NAME: ${{ inputs.branch || github.ref_name }}
      ENVIRONMENT: ${{ inputs.environment }}
      UPLOAD_PATH: ${{ inputs.upload_path }}
      AWS_REGION: eu-west-1

    steps:
      - name: üì® Checkout
        uses: actions/checkout@v4
        with:
          repository: dvsa/des-mobile-app
          ref: ${{ inputs.branch || github.ref_name }}

      - name: üöÄ Setup Paths
        run: echo "/opt/homebrew/bin:/opt/homebrew/sbin:$HOME/.rbenv/shims" >> $GITHUB_PATH

      - name: ‚öôÔ∏è Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: mobile-build-${{ github.repository_id }}

      - name: ü§´ Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            des-mobile-app/env
            des-globals/env
          parse-json-secrets: true

      - name: ‚öôÔ∏è Set Configuration Files
        env:
          IONIC_TOKEN: ${{ env.DES_MOBILE_APP_ENV_IONIC_TOKEN }}
          DVSA_PACKAGE_TOKEN: ${{ env.DES_MOBILE_APP_ENV_DVSA_PACKAGE_TOKEN }}
          IONIC_PRODUCT_KEY: ${{ env.DES_MOBILE_APP_ENV_IONIC_PRODUCT_KEY }}
          IONIC_APP_ID: ${{ env.DES_MOBILE_APP_ENV_IONIC_APP_ID }}
          IONIC_ORG_ID: ${{ env.DES_MOBILE_APP_ENV_IONIC_ORG_ID }}
        run: |
          aws secretsmanager get-secret-value --secret-id des-mobile-app-build-config --query SecretString | jq . --raw-output > build-config.sh && bash build-config.sh
          aws secretsmanager get-secret-value --secret-id des-mobile-app/fastlane-config --query SecretString | jq . --raw-output  > config.sh && bash config.sh

      - name: ‚ûï Install Dependencies
        run: |
          echo "NPM Version: $(npm -v)" >> $GITHUB_STEP_SUMMARY
          echo "Node Version: $(node -v)" >> $GITHUB_STEP_SUMMARY

          npm ci
          npm run config:${{ inputs.config-type }}
          npm run schema-version
          bundle config set --local path .bundle
          bundle install --jobs $(sysctl -n hw.physicalcpu)

      - name: ‚öíÔ∏è Build Project
        run: npm run build:${{ inputs.build-type }}

      - name: üöÄ Deploy Sentry
        if: ${{ inputs.environment == 'prod' && inputs.build-ipa == 'true' }}
        run: |
          aws secretsmanager get-secret-value --secret-id sentryclirc --query SecretString | jq . --raw-output  > .sentryclirc
          npm run sentry-deploy
          
      - name: üì± Build Mobile Simulator (${{ inputs.environment }})
        if: ${{ inputs.build-simulator == 'true' }}
        run: bundle exec fastlane build_sim
          
      - name: üì± Build Mobile App (${{ inputs.environment }})
        if: ${{ inputs.build-ipa == 'true' }}
        run: bundle exec fastlane build_ipa

      - name: üìùGenerate MS Teams JSON
        id: generate_ms_teams_json
        run: |
          download_sim_app_file_url=$(cat ./fastlane/simulator/url-app.txt 2>/dev/null || echo "Not generated")
          download_ipa_url=$(cat ./fastlane/builds/url-ipa.txt 2>/dev/null || echo "Not generated")
          qr_code_url=$(cat ./fastlane/builds/url-qr.txt 2>/dev/null || echo "Not generated")
          
          json="$(jq -n \
          --arg actor "${{ github.actor }}" \
          --arg branch "${{ inputs.branch || github.ref_name }}" \
          --arg environment "${{ inputs.environment }}" \
          --arg download_sim_app_file_url "$download_sim_app_file_url" \
          --arg download_ipa_url "$download_ipa_url" \
          --arg qr_code_url "$qr_code_url" \
          '{
            title: "üì± \($actor) triggered a mobile app build",
            sections: [{
              facts: [
                { name: "üè∑Ô∏è Branch/Tag:", value: $branch },
                { name: "‚öôÔ∏è Environment:", value: $environment },
                { name: "üì• Download Simulator:", value: "[Download .app file](\($download_sim_app_file_url))" },
                { name: "üì• Download IPA:", value: "[Download .ipa file](\($download_ipa_url))" },
                { name: "üì≤ QR Code:", value: "[Open QR code image](\($qr_code_url))" }
              ]
            }]
          }')"

          echo "json=$(echo "$json" | jq -c .)" >> $GITHUB_OUTPUT

      - name: üîî Send MS Teams Notification
        if: always()
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ env.DES_GLOBALS_ENV_MSTEAMS_WEBHOOK_MOBILE_APP }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          overwrite: ${{ steps.generate_ms_teams_json.outputs.json }}

      - name: ‚òÅÔ∏è Upload Mobile Artifacts to Summary
        uses: actions/upload-artifact@v4
        with:
          name: mobile-artifacts-${{ inputs.environment }}-${{ github.sha }}
          path: |
            ./fastlane/builds/*.ipa
            ./fastlane/simulator/*.zip

      - name: üî™ Kill Xcode
        if: always()
        run: osascript -e 'quit app "Xcode"' || true

#      - name: üì¢ Notify Teams
#        uses: dvsa/des-workflow-actions/.github/actions/notify-teams@MES-10614-mobile-app-fastlane-updates
#        with:
#          webhook_url: ${{ secrets.WEBHOOK_URL }}
#          ipa-link: $(cat ./fastlane/builds/url-html.txt)
#          qr-link: $(cat ./fastlane/builds/url-qr.txt)
#          information: "${{ inputs.environment }}"
