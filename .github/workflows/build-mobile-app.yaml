name: 📱 Build Mobile App
on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        required: true
      branch:
        type: string
        required: false
      environment:
        type: string
        required: true
      config-type:
        type: string
        required: true
      build-type:
        type: string
        required: false
        default: test
      build-simulator:
        type: string
        required: false
        default: false
      build-ipa:
        type: string
        required: false
        default: true

    secrets:
      AWS_ROLE:
        required: true

defaults:
  run:
    shell: zsh {0}

permissions:
  contents: write
  id-token: write

jobs:
  build-mobile-app:
    name: 📱 Build Mobile App (${{ inputs.environment }})
    runs-on: ${{ inputs.runs-on }}
    env:
      RUN_ID: ${{ github.run_id }}
      GH_REF_NAME: ${{ inputs.branch || github.ref_name }}
      ENVIRONMENT: ${{ inputs.environment }}
      AWS_REGION: eu-west-1
      LC_ALL: 'en_US.UTF-8'
      LANG: 'en_US.UTF-8'
      GEM_HOME: "~/.gem/des"

    steps:
      - name: 🚀 Setup Paths
        run: echo "/opt/homebrew/bin:/opt/homebrew/sbin:$HOME/.rbenv/shims:${{ env.GEM_HOME }}/bin" >> $GITHUB_PATH

#      - name: ⚙️ Set Environment
#        run: |
#          echo "GEM_HOME=$HOME/.gem" >> $GITHUB_ENV
#          echo "PATH=$GEM_HOME/bin:$HOME/.rbenv/shims:/opt/homebrew/bin/:$PATH" >> $GITHUB_ENV

      - name: 📨 Checkout
        uses: actions/checkout@v4
        with:
          repository: dvsa/des-mobile-app
          ref: ${{ inputs.branch || github.ref_name }}

      - name: ⚙️ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: mobile-build-${{ github.repository_id }}

      - name: 🤫 Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            des-mobile-app/env
            des-globals/env
          parse-json-secrets: true

      - name: ⚙️ Set Configuration Files
        env:
          IONIC_TOKEN: ${{ env.DES_MOBILE_APP_ENV_IONIC_TOKEN }}
          DVSA_PACKAGE_TOKEN: ${{ env.DES_MOBILE_APP_ENV_DVSA_PACKAGE_TOKEN }}
          IONIC_PRODUCT_KEY: ${{ env.DES_MOBILE_APP_ENV_IONIC_PRODUCT_KEY }}
          IONIC_APP_ID: ${{ env.DES_MOBILE_APP_ENV_IONIC_APP_ID }}
          IONIC_ORG_ID: ${{ env.DES_MOBILE_APP_ENV_IONIC_ORG_ID }}
        run: |
          aws secretsmanager get-secret-value --secret-id des-mobile-app-build-config --query SecretString | jq . --raw-output > build-config.sh && bash build-config.sh
          aws secretsmanager get-secret-value --secret-id fastlane-config --query SecretString | jq . --raw-output  > config.sh && bash config.sh

      - name: ➕ Install Dependencies
        run: |
          echo "NPM Version: $(npm -v)" >> $GITHUB_STEP_SUMMARY
          echo "Node Version: $(node -v)" >> $GITHUB_STEP_SUMMARY

          npm ci
          npm run config:${{ inputs.config-type }}
          npm run schema-version
          bundle install --jobs $(sysctl -n hw.physicalcpu)
#          bundle config set path .gem

      - name: ⚒️ Build Project
        run: npm run build:${{ inputs.build-type }}

      - name: 📱 Build Mobile Simulator (${{ inputs.environment }})
        if: ${{ inputs.build-simulator == 'true' }}
        run: bundle exec fastlane simulator

      #      - name: ⚙️ Bump Version
      #        if: ${{ inputs.environment == 'release' && inputs.build-ipa == 'true' }}
      #        run: node .github/scripts/update-des-app-version.js ${{ github.ref_name }}

      - name: 🚀 Deploy Sentry
        if: ${{ inputs.environment == 'release' && inputs.build-ipa == 'true' }}
        run: |
          aws secretsmanager get-secret-value --secret-id sentryclirc --query SecretString | jq . --raw-output  > .sentryclirc
          npm run sentry-deploy

      - name: 📱 Build Mobile App (${{ inputs.environment }})
        if: ${{ inputs.build-ipa == 'true' }}
        run: bundle exec fastlane build

      - name: 🔍 Get S3 Object URLs
        id: get_s3_object_url
        run: |        
          artefact_base_url="https://${{ env.DES_MOBILE_ARTEFACTS_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com/github-actions/${{ env.S3_PATH }}"
          artefact_download_url="${artefact_base_url}/${{ env.ARTEFACT_FILENAME }}"
          artefact_install_url="${artefact_base_url}/${{ env.INSTALL_URL }}"
          
          echo "artefact_download_url=$artefact_download_url" >> $GITHUB_OUTPUT
          echo "artefact_install_url=$artefact_install_url" >> $GITHUB_OUTPUT

      - name: 📝Generate MS Teams JSON
        id: generate_ms_teams_json
        run: |
          json="$(jq -n \
          --arg actor "${{ github.actor }}" \
          --arg branch "${{ inputs.branch || github.ref_name }}" \
          --arg environment "${{ inputs.environment }}" \
          --arg download_url "${{ steps.get_s3_object_url.outputs.artefact_download_url }}" \
          '{
            title: "📱 \($actor) triggered a mobile app build",
            sections: [{
              facts: [
                { name: "🏷️ Branch/Tag:", value: $branch },
                { name: "⚙️ Environment:", value: $environment },
                { name: "📥 Download:", value: "[Download artefact](\($download_url))" }
              ]
            }]
          }')"
                    
          if [[ "${{ inputs.environment }}" == "feature" ]]; then
            json=$(jq '.sections[].facts += [{
              name: "📲 Install:", value: "[Open installation page](${{ steps.get_s3_object_url.outputs.artefact_install_url }})"
            }]' <<< "$json")
          fi
                    
          echo "json=$(echo "$json" | jq -c .)" >> $GITHUB_OUTPUT

      - name: 🔔 Send MS Teams Notification
        if: always()
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ env.DES_GLOBALS_ENV_MSTEAMS_WEBHOOK_MOBILE_APP }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          overwrite: ${{ steps.generate_ms_teams_json.outputs.json }}