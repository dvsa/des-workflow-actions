name: 🚀 Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: The associated Terraform environment to deploy the service to
        type: string
        required: true
      component:
        description: The associated Terraform component for the service
        type: string
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  build:
    name: 🧱 Build
    uses: dvsa/appdev-github-actions/.github/workflows/ci-backend.yaml@main
    secrets: inherit

  upload-artifacts:
    name: ☁️ Upload Artifacts to S3
    needs: build
    if: contains(fromJSON('["dev", "release"]'), inputs.environment)
    runs-on: ubuntu-latest
    steps:
      - name: 📨 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Set Environment Variables
        run: |        
          echo "SERVICE_NAME=$(jq -r '.name | sub("des-"; "") | sub ("-service"; "")' package.json)" >> $GITHUB_ENV
          echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: 🪪 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DES_MGMT_ROLE }}
          aws-region: ${{ vars.DVSA_AWS_REGION}}
          role-session-name: GHA

      - name: 🤫 Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-artifacts-${{ github.run_id }}
          path: artifacts

      - name: ☁️ Upload Artifacts to S3
        run: |
          echo "## Functions:" >> $GITHUB_STEP_SUMMARY    
          manifest_filename="${{ env.SERVICE_NAME }}_${{ env.VERSION }}-$(date +%s)-${{ env.SHORT_SHA }}.manifest"

          for artifact in artifacts/*; do
            repo_name=$(jq -r '.name ' package.json)
            artifact_filename="$(basename $artifact '.zip')-${{ env.SHORT_SHA }}.zip"
            
            # Skip if the artifact is an API proxy build artefact
            if [[ $artifact_filename != "$repo_name"* ]]; then
              # Upload function to S3
              mv "$artifact" "artifacts/$artifact_filename"
          
              aws s3 cp artifacts/$artifact_filename s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/functions/$artifact_filename
              echo "✅ Uploaded \`$artifact_filename\` to S3" >> $GITHUB_STEP_SUMMARY
            
              # Add function to manifest
              function_name="${artifact_filename%%-${{ env.VERSION }}*}"
              version="${artifact_filename#$function_name-}"
              tf_variable_name="${function_name//-/_}_version"
          
              echo "$tf_variable_name = \"$version\"" >> "$manifest_filename"
            fi
          done
          
          # Upload manifest to S3 for dev builds
          if [[ ${{ inputs.environment }} == "dev" ]]; then
            aws s3 cp $manifest_filename s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/manifests/dev/
            echo "## Manifest:" >> $GITHUB_STEP_SUMMARY
            echo "✅ Uploaded \`$manifest_filename\` to S3" >> $GITHUB_STEP_SUMMARY
          fi

  deploy:
    name: 🚀 Deploy
    needs: [build, upload-artifacts]
    if: |
      always() && !failure() && !cancelled() && 
      !startsWith(github.ref_name, 'release-') && 
      !contains(fromJSON('["live", "prod", "prep", "uat", "release"]'), inputs.environment)
    runs-on: ubuntu-latest
    steps:
      - name: 📨 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Set Environment Variables
        run: |
          echo "SERVICE_NAME=$(jq -r '.name | sub("des-"; "") | sub ("-service"; "")' package.json)" >> $GITHUB_ENV
          echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-artifacts-${{ github.run_id }}
          path: artifacts

      - name: 🪪 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DES_MGMT_ROLE }}
          aws-region: ${{ vars.DVSA_AWS_REGION}}
          role-session-name: GHA

      - name: 🪪 Configure NonProd AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.DES_NONPROD_ROLE }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: 🚀 Deploy Lambda Package
        run: |
          echo "## Deployments:" >> $GITHUB_STEP_SUMMARY
          
          for artifact in artifacts/*; do
            repo_name=$(jq -r '.name ' package.json)
            artifact_filename="$(basename $artifact '.zip')-${{ env.SHORT_SHA }}.zip"
                    
            # Skip if the artifact is an API proxy build artefact
            if [[ $artifact_filename != "$repo_name"* ]]; then
              lambda_function_name="mes-${{ inputs.environment }}-${{ inputs.component }}-${{ env.SERVICE_NAME }}-${artifact_filename%%-${{ env.VERSION }}*}"
            
              mv "$artifact" "artifacts/$artifact_filename"
            
              aws lambda update-function-code --function-name $lambda_function_name \
              --zip-file fileb://artifacts/$artifact_filename \
              --query "{FunctionName: FunctionName, LastUpdateStatus: LastUpdateStatus}"
            
              aws lambda wait function-updated --function-name $lambda_function_name
              status=$(aws lambda get-function-configuration --function-name $lambda_function_name \
              --query "LastUpdateStatus" --output text)
            
              if [ $status == "Failed" ]; then
                echo "Failed to update ${lambda_function_name}"
                exit 1
              fi
          
              echo "✅ Deployed \`$artifact_filename\` to the \`$lambda_function_name\` Lambda function" >> $GITHUB_STEP_SUMMARY
            fi
          done

  send-teams-notification:
    if: |
      always() &&
      (needs.upload-artifacts.result == 'success' || needs.upload-artifacts.result == 'skipped' || needs.upload-artifacts.result == 'failure') &&
      (needs.deploy.result == 'success' || needs.deploy.result == 'skipped' || needs.deploy.result == 'failure')
    needs: [build, upload-artifacts, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: 🪪 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DES_MGMT_ROLE }}
          aws-region: ${{ vars.DVSA_AWS_REGION}}
          role-session-name: GHA

      - name: 🤫 Get AWS Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: 📝 Generate MS Teams Notify JSON
        id: ms-teams-json
        uses: dvsa/des-workflow-actions/.github/actions/generate-ms-teams-json@main
        with:
          needs-context: ${{ toJSON(needs) }}

      - name: 🔔 Send MS Teams Notification
        if: always()
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ env.DES_GLOBALS_ENV_MSTEAMS_WEBHOOK_SERVICE_BUILDS }}
          job: ${{ steps.ms-teams-json.outputs.job-context }}
          needs: ${{ toJson(needs) }}
          steps: ${{ steps.ms-teams-json.outputs.steps-context }}
          overwrite: "{title: `${{ github.repository }} | ${{ github.ref_name }} | BY: ${{ github.actor }}`}"
