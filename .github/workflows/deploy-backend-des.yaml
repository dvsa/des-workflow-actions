name: üöÄ Deploy

on:
  workflow_call:
    inputs:
      branch:
        description: The branch of the service to build the artifact/s from
        type: string
        required: true
      environment:
        description: The associated Terraform environment to deploy the service to
        type: string
        required: true
      component:
        description: The associated Terraform component for the service
        type: string
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  build:
    name: üß± Build
    uses: dvsa/appdev-github-actions/.github/workflows/ci-backend.yaml@main
    with:
      branch: ${{ inputs.branch || github.ref_name }}
    secrets: inherit

  upload-artifacts:
    name: ‚òÅÔ∏è Upload Artifacts to S3
    needs: build
    if: ${{ inputs.environment == 'dev' }}
    runs-on: ubuntu-latest
    steps:
      - name: üì® Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref_name }}

      - name: ‚öôÔ∏è Set Environment Variables
        run: |        
          echo "SERVICE_NAME=$(jq -r '.name | sub("des-"; "") | sub ("-service"; "")' package.json)" >> $GITHUB_ENV
          echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: ü™™ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DES_MGMT_ROLE }}
          aws-region: ${{ vars.DVSA_AWS_REGION}}
          role-session-name: GHA

      - name: ü§´ Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: üì• Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-artifacts-${{ github.run_id }}
          path: artifacts

      - name: ‚òÅÔ∏è Upload Artifacts to S3
        run: |
          echo "## Functions:" >> $GITHUB_STEP_SUMMARY    
          manifest="${{ env.SERVICE_NAME }}_${{ env.VERSION }}-$(date +%s)-${{ env.SHORT_SHA }}.manifest"

          for artifact in artifacts/*; do
            artifact_filename="$(basename $artifact '.zip')-${{ env.SHORT_SHA }}.zip"
            mv "$artifact" "artifacts/$artifact_filename"
            
            # Upload function to S3
            aws s3 cp artifacts/$artifact_filename s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/functions/$artifact_filename
            echo "‚úÖ Uploaded \`$artifact_filename\` to S3" >> $GITHUB_STEP_SUMMARY
          
            # Add function to manifest
            function_name="$(echo ${artifact_filename%%-${{ env.VERSION }}*} | tr '-' '_')"
            echo "${function_name}_filename = \"$artifact_filename\"" >> "$manifest"
          done
          
          # Upload manifest to S3
          aws s3 cp $manifest s3://${{ env.DES_GLOBALS_ENV_ARTEFACT_S3 }}/mes/gha/manifests/dev/

          echo "## Manifest:" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Uploaded \`$manifest\` to S3" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: üöÄ Deploy
    needs: [build, upload-artifacts]
    if: |
      always() && !failure() && !cancelled() && 
      !startsWith(inputs.branch, 'release-') && 
      !contains(fromJSON('["live", "prod", "prep", "uat"]'), inputs.environment)
    runs-on: ubuntu-latest
    steps:
      - name: üì® Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.ref_name }}

      - name: ‚öôÔ∏è Set Environment Variables
        run: |
          echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: üì• Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-artifacts-${{ github.run_id }}
          path: artifacts

      - name: ü™™ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DES_MGMT_ROLE }}
          aws-region: ${{ vars.DVSA_AWS_REGION}}
          role-session-name: GHA

      - name: ü™™ Configure NonProd AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.DES_NONPROD_ROLE }}
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: üöÄ Deploy Lambda Package
        run: |
          echo "## Deployments:" >> $GITHUB_STEP_SUMMARY       
          lambda_functions=$(aws lambda list-functions --query "Functions[?starts_with(FunctionName, \
          'mes-${{ inputs.environment }}-api')].FunctionName" --output text | tr '\t' '\n')
          
          for artifact in artifacts/*; do
            artifact_filename="$(basename $artifact '.zip')-${{ env.SHORT_SHA }}.zip"
            function_name="${artifact_filename%%-${{ env.VERSION }}*}"
          
            mv "$artifact" "artifacts/$artifact_filename"
          
            # Find matching Lambda function using function name
            pattern=$(echo $function_name | sed 's/-/\/ \&\& \//g')
            lambda_function_name=$(echo "$lambda_functions" | awk "/$pattern/")
          
            if [[ -z $lambda_function_name ]]; then
              echo "Deployment aborted: No equivalent Lambda function found for $function_name"
              exit 1
            fi    
          
            aws lambda update-function-code --function-name $lambda_function_name \
            --zip-file fileb://artifacts/$artifact_filename \
            --query "{FunctionName: FunctionName, LastUpdateStatus: LastUpdateStatus}"
          
            aws lambda wait function-updated --function-name $lambda_function_name
            status=$(aws lambda get-function-configuration --function-name $lambda_function_name \
            --query "LastUpdateStatus" --output text)
          
            if [ $status == "Failed" ]; then
              echo "Failed to update ${lambda_function_name}"
              exit 1
            fi
          
            echo "‚úÖ Deployed \`$artifact_filename\` to the \`$lambda_function_name\` Lambda function" >> $GITHUB_STEP_SUMMARY
          done

  send-teams-notification:
    if: always()
    needs: [build, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: üîë Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions
          aws-region: ${{ secrets.DVSA_AWS_REGION }}

      - name: ü§´ Get AWS Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: des-globals/env
          parse-json-secrets: true

      - name: üìù Generate MS Teams Notify JSON
        id: ms-teams-json
        uses: dvsa/des-workflow-actions/.github/actions/generate-ms-teams-json@main
        with:
          needs-context: ${{ toJSON(needs) }}

      - name: üîî Send MS Teams Notification
        if: always()
        uses: skitionek/notify-microsoft-teams@v1.0.4
        with:
          webhook_url: ${{ env.DES_GLOBALS_ENV_MSTEAMS_WEBHOOK_RELEASE_MANIFEST }}
          job: ${{ steps.ms-teams-json.outputs.job-context }}
          needs: ${{ toJson(needs) }}
          steps: ${{ steps.ms-teams-json.outputs.steps-context }}
          overwrite: "{title: `${{ github.repository }} | ${{ inputs.branch || github.ref_name }} | BY: ${{ github.actor }}`}"
